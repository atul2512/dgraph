// automatically generated by the FlatBuffers compiler, do not modify

package task

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Sort struct {
	_tab flatbuffers.Table
}

func GetRootAsSort(buf []byte, offset flatbuffers.UOffsetT) *Sort {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Sort{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *Sort) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Sort) Coarse() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Sort) MutateCoarse(n byte) bool {
	return rcv._tab.MutateByteSlot(4, n)
}

func (rcv *Sort) Attr() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Sort) CoarseSort(obj *CoarseSort) *CoarseSort {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(CoarseSort)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *Sort) FineSort(obj *FineSort) *FineSort {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(FineSort)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func SortStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func SortAddCoarse(builder *flatbuffers.Builder, coarse byte) {
	builder.PrependByteSlot(0, coarse, 0)
}
func SortAddAttr(builder *flatbuffers.Builder, attr flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(attr), 0)
}
func SortAddCoarseSort(builder *flatbuffers.Builder, coarseSort flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(coarseSort), 0)
}
func SortAddFineSort(builder *flatbuffers.Builder, fineSort flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(fineSort), 0)
}
func SortEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
